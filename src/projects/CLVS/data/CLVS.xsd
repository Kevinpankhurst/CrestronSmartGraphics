<?xml version="1.0" encoding="utf-8" ?>
<xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:include schemaLocation=".\PropertyDef.xsd" />
    <xs:element name="root">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="TargetControl" type="xs:string" fixed="CLVS.swf" hidden="true" readOnly="true"/>
        <xs:element name="TargetXSD" type="xs:string" fixed="CLVS.xsd" hidden="true" readOnly="true" doNotCompile="true"/>
        <xs:element name="ControlName" title="Control Name" type="xs:string" hidden="true" readOnly="true"/>
        <xs:element name="CategoryName" title="Category Name" type="xs:string" hidden="false" readOnly="true" doNotCompile="true"/>
		<xs:element name="ControlSummary" type="xs:string" hidden="true" readOnly="true" doNotCompile="true"/>
        <xs:element name="Thumbnail" type="xs:string" hidden="true" readOnly="true" doNotCompile="true"/>
		<xs:element name="HelpID" type="xs:string" hidden="true" readOnly="false" doNotCompile="true" />
        <xs:element name="MobileAppIncluded" type="xs:boolean" hidden="true" readOnly="true" doNotCompile="true"/>
		<xs:element name="MinContainerVersion" type="xs:string" hidden="true" readOnly="false" doNotCompile="true"/>
        <xs:element name="MinFlashVersion" type="xs:string" hidden="true" readOnly="false" doNotCompile="true"/>
		<xs:element name="MinFirmwareVersion" type="xs:float" hidden="true" readOnly="true" doNotCompile="true"/>
        <xs:element name="EmbeddedAppSupport" type="xs:string" hidden="true" readOnly="false" doNotCompile="true"/>
        <xs:element name="EmbeddedVideoSupport" type="xs:boolean" hidden="true" readOnly="false" doNotCompile="true"/>
        <xs:element name="VersionNumber" type="xs:string" hidden="false" readOnly="true"/>
        <xs:element name="ObjectName" type="xs:string" hidden="false" readOnly="false"/>
        <xs:element name="Descripton" type="xs:string" hidden="false" readOnly="false" doNotCompile="true"/>
		<xs:element name="ParentSWF" type="xs:string" hidden="true" readOnly="true"/>
		<xs:element name="IsRSL" type="xs:boolean" hidden="true" readOnly="true"/>
        <xs:element name="TemplateData" type="xs:string" title="Template Data" doNotCompile="true"/>
		<xs:element name="LinkedModule" type="xs:string" title="Linked Module" hidden="false" doNotCompile="true"/>
		<xs:element name="ControlSize" type="xs:int" title="Control Size" hidden="true" doNotCompile="true"/>
		<xs:element name="GraphicSizeMultiplier" type="xs:int" title="Control Size" hidden="true" doNotCompile="true"/>
		<xs:element name="Properties" type="Group" title="Properties" propertyType="ChildProperties">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PositionAndSize" type="Locale" title="Position and Size" canProgram="false" hidden="false" readOnly="false" propertyType="Locale" rotatedHidden="true"/>
			  <xs:element name="RotatedPositionAndSize" type="RotatedLocale" title="Rotated Position and Size" canProgram="false" hidden="true" readOnly="false" propertyType="RotatedLocale" rotatedHidden="false"/>
			  <xs:element name="ControlJoin" type="ControlJoin" title="Smart Object ID" canProgram="false" hidden="false" readOnly="false"/>
				<xs:element canProgram="false" hidden="false" name="DigitalEnableJoin" readOnly="false" title="Enable Digital Join" type="DigitalJoin">
					<xs:annotation>
						<xs:documentation>You may optionally select a digital join to receive feedback from the control system. When the signal is low, the look of the button will change to represent a disabled state and the object will not be pressable. NOTE: If a join is selected, the associated signal must be high to enable the image. If no join is selected, the button will always be enabled.</xs:documentation>
					</xs:annotation>
				</xs:element>
			   <xs:element canProgram="false" hidden="false" name="DigitalVisibilityJoin" readOnly="false" title="Visibility Digital Join" type="DigitalJoin">
					<xs:annotation>
						<xs:documentation>You may optionally select a digital join to receive feedback from the control system. When the signal is low, the button will not be displayed and the area will not be pressable. NOTE: If a join is selected, the associated signal must be high to display the image. If no join is selected, the button will always be displayed.</xs:documentation>
					</xs:annotation>
				</xs:element>
			  <xs:element name="ListProperties" type="Group" title="List Properties">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="ListPosition" type="CardinalDirection" title="List Position" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>The position of the drag and drop list in relation to the area where the droppable screens are rendered.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ListLength" type="Percent" title="List Length" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>Total length of the List in percent</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ListThickness" type="Range0to50" title="List Thickness" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>Total Thickness of the List in percent</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="EndlessScrolling" type="xs:boolean" title="Endless Scrolling" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>When endless scrolling is selected the items in the list will loop when the end is reached creating the illusion that there are an 'endless' number of items.</xs:documentation>
								</xs:annotation>
							</xs:element>					  
							<xs:element name="ClickTime" type="xs:float" title="Click Time" canProgram="false" hidden="true" readOnly="false">
								<xs:annotation>
									<xs:documentation>The time threshold (in milliseconds) until a click is registered and a join is dispatched.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ItemSpacing" type="xs:float" title="Item Spacing" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>The item spacing value indicates the amount of space between list items when rendered.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="Margin" type="xs:int" title="Margin" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>The margin dictates the amount of space (in pixels) left as a border between the list and the background image.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="NumDivisions" type="xs:int" title="Number of List Divisions" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>This property determines the number of rows (when the list is horizontal) or columns (when the list is vertical) the contents of the list will be divided into.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ListBackground" type="Style" title="List Background" canProgram="false" hidden="false" readOnly="false" categoryName="Backgrounds" propertyType="Style" >
								<xs:annotation>
									<xs:documentation>The styled graphics that determine the look/feel of the drag and drop control background.  This style contains a single background graphic</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="DisplayBackground" type="xs:boolean" title="Show Background" canProgram="false" hidden="false" readOnly="false">
								<xs:annotation>
									<xs:documentation>Select whether the background of the list is hidden or shown.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ShowScrollbar" title="Show Scrollbar" canProgram="false" hidden="false" readOnly="false" type="xs:boolean">
								<xs:annotation>
									<xs:documentation>Determines whether or not the scrollbar will be visible on the list.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="Position" title="Scrollbar Position" canProgram="false" hidden="false" readOnly="true" type="VerticalStartPosition">
								<xs:annotation>
									<xs:documentation>Sets the position of the scrollbar on the list.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
			  </xs:element>
			  <xs:element name="PreviewState" type="PreviewState" title="Preview State" canProgram="false" hidden="true" readOnly="false" dependency="Source" doNotCompile="true" />
			  <xs:element name="Sources" type="Group" title="Sources">
                <xs:complexType>
                  <xs:sequence>
					<xs:element name="IconStyle" type="Style" title="Video Source Icons" canProgram="false" hidden="false" readOnly="false" categoryName="Icons" propertyType="Style" >
						<xs:annotation>
							<xs:documentation>The styled graphics and font styling information that determine the look/feel of the source icon image and the source icon text label.  This style contains n states of icon images.</xs:documentation>
						</xs:annotation>
					</xs:element>
                    <xs:element name="SourceCount" type="xs:int" title="Number of Sources" groupDependency="Source" canProgram="false" hidden="false" readOnly="false">
						<xs:annotation>
							<xs:documentation>Sets the number of sources.</xs:documentation>
						</xs:annotation>
					 </xs:element>
                    <xs:element name="Source" type="Group" title="Source" dependency="SourceCount" maxOccurs="256" startingValue="1">
                      <xs:complexType>
                        <xs:sequence>
						  <xs:element name="SourceIndex" type="xs:int" title="Source Analog Index" canProgram="false" hidden="false" readOnly="false" increment="1"> 
							<xs:annotation>
									<xs:documentation>The index dispatched to the control system for this icon when it is dropped on a screen.</xs:documentation>
								</xs:annotation>
							</xs:element>
						  <xs:element name="ImageType" title="Image Type" canProgram="false" hidden="false" readOnly="false">
							<xs:annotation>
								<xs:documentation>The type of image you want to use for this mode of the icon image.  Either a state of the style selected or an external image loaded off the disk.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:choice>
									<xs:element name="UseImage" type="xs:string" title="Use Custom Image" canProgram="false" hidden="false" readOnly="false">
										<xs:annotation>
											<xs:documentation>Using a custom image allows you to load an image of your choice off the disk and have it display in the control.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:all>
												<xs:element name="Image" type="Image" title="Image Path" canProgram="false" hidden="false" readOnly="false" propertyType="Image" >
													<xs:annotation>
														<xs:documentation>The path on the disk of the external image you wish to be displayed for this mode.</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:all>
										</xs:complexType>
									</xs:element>
									<xs:element name="UseState" type="xs:string" title="Use Style's State" canProgram="false" hidden="false" readOnly="false">
										<xs:annotation>
											<xs:documentation>Using a state in the style will allow you to select an existing state from the style to be displayed.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:all>
												<xs:element name="IconFrame" type="StateSelection" title="Style Frame Number" dependency="IconStyle" canProgram="false" hidden="false" readOnly="false">
													<xs:annotation>
														<xs:documentation>The state in the style that you want to be displayed for this mode.</xs:documentation>
													</xs:annotation>
												</xs:element>
											</xs:all>
										</xs:complexType>
									</xs:element>
								</xs:choice>
							</xs:complexType>
						  </xs:element>
                          <xs:element name="Label" type="htmlText" title="Label" canProgram="false" hidden="false" readOnly="false" fontStyle="IconStyle">
							<xs:annotation>
								<xs:documentation>Sets the source label text.</xs:documentation>
							</xs:annotation>
						  </xs:element>
						  <xs:element name="SubpageProperties" type="Group" title="Subpage Properties">
							  <xs:complexType>
								<xs:sequence>
									<xs:element name="Subpage" type="SubpageRef" title="Subpage" canProgram="false" hidden="false" readOnly="false" propertyType="SubpageRef">
										<xs:annotation>
											<xs:documentation>If a subpage is selected, the control will populate an instance of the selected subpage on a screen when this source is dropped.  The subpage will be scaled within aspect to fit within the bounds of the drop area.</xs:documentation>
										</xs:annotation>
									  </xs:element>
									<xs:element name="DigitalJoinOffset" type="JoinOffset" title="Digital Join Offset" canProgram="false" hidden="false" readOnly="false"/>
									<xs:element name="AnalogJoinOffset" type="JoinOffset" title="Analog Join Offset" canProgram="false" hidden="false" readOnly="false"/>
									<xs:element name="SerialJoinOffset" type="JoinOffset" title="Serial Join Offset" canProgram="false" hidden="false" readOnly="false"/>
								</xs:sequence>
							  </xs:complexType>
							</xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
			  <xs:element name="Screens" type="Group" title="Screens">
                <xs:complexType>
                  <xs:sequence>
					<xs:element name="ScreenSwitching" type="JoinCommand" title="Screen Switching Analog" canProgram="false" hidden="true" readOnly="false" propertyType="JoinCommand" />
					<xs:element name="ScreenStyle" type="Style" title="Screen Style" canProgram="false" hidden="false" readOnly="false" categoryName="Backgrounds" propertyType="Style" >
						<xs:annotation>
							<xs:documentation>The styled graphics and font styling informatiojn that determine the look/feel of the screen image and the screen label text.  This style should contain a single screen image.</xs:documentation>
						</xs:annotation>
					</xs:element>
                    <xs:element name="DisplayLabels" type="xs:boolean" title="Display Labels On Screens" canProgram="false" hidden="false" readOnly="false">
						<xs:annotation>
							<xs:documentation>Enables or disables the display of labels on screens.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Margin" type="xs:int" title="Screen Margin" canProgram="false" hidden="false" readOnly="false">
					  <xs:annotation>
							<xs:documentation>The margin dictates the amount of space (in pixels) left as a border between the edge of the screen and the icon when it is dropped onto the screen.  The margin also reflects the space left for the icon when it is dropped.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="LocalMode" type="xs:boolean" title="Local Drop Mode" canProgram="false" hidden="false" readOnly="false">
						<xs:annotation>
							<xs:documentation>If this value is checked, the icon will be assigned to the screen locally and so that control system feedback is unnecessary.  Otherwise, when an analog is dispatched, the simple program must feedback that value in order for the icon to be populated to the screen.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="EnforceGeometry" type="xs:boolean" title="EnforceGeometry" canProgram="false" hidden="true" readOnly="false">
						<xs:annotation>
							<xs:documentation>When enforce geometry is selected, the control will always divide the screens into a number of rows and columns such that there is no overflow of remainder on to a new line. However, if a large prime number of screens is assigned, the control will populate the screens in one very long row.  If the number of screens is a non-standard denomination, this property should be left unchecked.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ScreenAspectRatio" type="AspectRatio" title="Screen Aspect Ratio" canProgram="false" hidden="true" readOnly="false">
						<xs:annotation>
							<xs:documentation>The aspect ratio of the drag and drop screen area.  If this value is set the screens will always maintain the specified aspect ratio.</xs:documentation>
						</xs:annotation>
					</xs:element>
                    <xs:element name="ScreenCount" type="xs:int" title="Number of Screens" groupDependency="Screen" canProgram="false" hidden="false" readOnly="false">
						<xs:annotation>
							<xs:documentation>Sets the maximum number of screens on the control (range: 1-36).  *NOTE* A minimum screen size of 80Wx60H will be enforced.  Your total number of screens may be limited automatically if the size of the control is exceeded.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="ColumnCount" type="xs:int" title="Number of Columns" canProgram="false" hidden="true" readOnly="false">
						<xs:annotation>
							<xs:documentation>Sets the number of columns in the grid view. Setting to zero disables this feature and returns to standard calculations.  *NOTE* A minimum screen size of 80Wx60H will be enforced.  Your total number of columns may be limited automatically if the width of the control is exceeded.</xs:documentation>
						</xs:annotation>
					 </xs:element>
                    <xs:element name="Screen" type="Group" title="Screen" dependency="ScreenCount" minOccurs="1" maxOccurs="36" startingValue="1">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="Name" type="htmlText" title="Label" canProgram="false" hidden="false" readOnly="false" fontStyle="ScreenStyle">
							  <xs:annotation>
									<xs:documentation>Sets the label text of the screen.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="ScreenPositionAndSize" type="Group" title="Screen Position And Size" canProgram="false" hidden="false" readOnly="false">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="ScreenTop" type="Percent" title="Top" canProgram="false" hidden="false" readOnly="false">
											<xs:annotation>
												<xs:documentation>Top position of the screen in percent.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="ScreenLeft" type="Percent" title="Left" canProgram="false" hidden="false" readOnly="false">
											<xs:annotation>
												<xs:documentation>Left position of the screen in percent.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="ScreenWidth" type="Percent" title="Width" canProgram="false" hidden="false" readOnly="false">
											<xs:annotation>
												<xs:documentation>Width of the screen in percent.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="ScreenHeight" type="Percent" title="Height" canProgram="false" hidden="false" readOnly="false">
											<xs:annotation>
												<xs:documentation>Height of the screen in percent.</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
                          <xs:element name="SourceSelection" type="JoinCommand" title="Source Selection" canProgram="false" hidden="true" readOnly="false" propertyType="JoinCommand" />
						  <xs:element name="SourceChanged" type="JoinCommand" title="Source Changed" canProgram="false" hidden="true" readOnly="false" propertyType="JoinCommand" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
			</xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>